{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Medium;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red53\green118\blue190;
\red184\green14\blue61;\red247\green238\blue241;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs72 \cf0 Philosophy
\fs24 \

\b 1.No recompiling changing app (native)
\b0 \
\pard\pardeftab720\sl400\sa200\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 We meet requirement #1 by using vendor-provided automation frameworks under the hood. That way, we don't need to compile in any Appium-specific or third-party code or frameworks to your app. This means you're testing the same app you're shipping. The vendor-provided frameworks we use are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 iOS: Apple's {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/UIAutomationRef/"}}{\fldrslt \cf4 \strokec4 UIAutomation}}\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Android 4.2+: Google's {\field{\*\fldinst{HYPERLINK "http://developer.android.com/tools/help/uiautomator/index.html"}}{\fldrslt \cf4 \strokec4 UiAutomator}}\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Android 2.3+: Google's {\field{\*\fldinst{HYPERLINK "http://developer.android.com/reference/android/app/Instrumentation.html"}}{\fldrslt \cf4 \strokec4 Instrumentation}}. (Instrumentation support is provided by bundling a separate project, {\field{\*\fldinst{HYPERLINK "http://selendroid.io/"}}{\fldrslt \cf4 \strokec4 Selendroid}})\cb1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\

\b 2. Test framework agnostic:
\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2   wrapping the vendor-provided frameworks in one API, the {\field{\*\fldinst{HYPERLINK "http://docs.seleniumhq.org/projects/webdriver/"}}{\fldrslt \cf4 \strokec4 WebDriver}} API. WebDriver (aka "Selenium WebDriver") specifies a client-server protocol (known as the {\field{\*\fldinst{HYPERLINK "https://w3c.github.io/webdriver/webdriver-spec.html"}}{\fldrslt \cf4 \strokec4 JSON Wire Protocol}}). Given this client-server architecture, a client written in any language can be used to send the appropriate HTTP requests to the server. There are already {\field{\*\fldinst{HYPERLINK "http://appium.io/downloads"}}{\fldrslt \cf4 \strokec4 clients written in every popular programming language}}. This also means that you're free to use whatever test runner and test framework you want; the client libraries are simply HTTP clients and can be mixed into your code any way you please. In other words, Appium & WebDriver clients are not technically "test frameworks" -- they are "automation libraries". You can manage your test environment any way you like!
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Opensource\
\
\

\b 3. Not reinvent the wheel
\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2  in the same way: WebDriver has become the de facto standard for automating web browsers, and is a {\field{\*\fldinst{HYPERLINK "https://dvcs.w3.org/hg/webdriver/raw-file/tip/webdriver-spec.html"}}{\fldrslt \cf4 \strokec4 W3C Working Draft}}. Why do something totally different for mobile? Instead we have {\field{\*\fldinst{HYPERLINK "http://appium.io/slate/en/master/#spec-draft.md"}}{\fldrslt \cf4 \strokec4 extended the protocol}} with extra API methods useful for mobile automation.
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\

\b APPIUM CONCEPTS\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f2\b0\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Appium Concepts\
\pard\pardeftab720\sl400\sa200\partightenfactor0

\f1\b\fs28 \cf2 Client/Server Architecture
\b0 \cb1 \uc0\u8232 \cb3 Appium is at its heart a webserver that exposes a REST API. It receives connections from a client, listens for commands, executes those commands on a mobile device, and responds with an HTTP response representing the result of the command execution. The fact that we have a client/server architecture opens up a lot of possibilities: we can write our test code in any language that has a http client API, but it is easier to use one of the {\field{\*\fldinst{HYPERLINK "http://appium.io/downloads"}}{\fldrslt \cf4 \strokec4 Appium client libraries}}. We can put the server on a different machine than our tests are running on. We can write test code and rely on a cloud service like {\field{\*\fldinst{HYPERLINK "https://saucelabs.com/mobile"}}{\fldrslt \cf4 \strokec4 Sauce Labs}} to receive and interpret the commands.\

\b Session
\b0 \cb1 \uc0\u8232 \cb3 Automation is always performed in the context of a session. Clients initiate a session with a server in ways specific to each library, but they all end up sending a 
\f3\fs26 \cf5 \cb6 \strokec5 POST /session
\f1\fs28 \cf2 \cb3 \strokec2  request to the server, with a JSON object called the 'desired capabilities' object. At this point the server will start up the automation session and respond with a session ID which is used for sending further commands.\

\b Desired Capabilities
\b0 \cb1 \uc0\u8232 \cb3 Desired capabilities are a set of keys and values (i.e., a map or hash) sent to the Appium server to tell the server what kind of automation session we're interested in starting up. There are also various capabilities which can modify the behavior of the server during automation. For example, we might set the 
\f3\fs26 \cf5 \cb6 \strokec5 platformName
\f1\fs28 \cf2 \cb3 \strokec2  capability to 
\f3\fs26 \cf5 \cb6 \strokec5 iOS
\f1\fs28 \cf2 \cb3 \strokec2  to tell Appium that we want an iOS session, rather than an Android one. Or we might set the 
\f3\fs26 \cf5 \cb6 \strokec5 safariAllowPopups
\f1\fs28 \cf2 \cb3 \strokec2  capability to 
\f3\fs26 \cf5 \cb6 \strokec5 true
\f1\fs28 \cf2 \cb3 \strokec2  in order to ensure that, during a Safari automation session, we're allowed to use JavaScript to open up new windows. See the {\field{\*\fldinst{HYPERLINK "http://appium.io/slate/en/master/#caps.md"}}{\fldrslt \cf4 \strokec4 capabilities doc}} for the complete list of capabilities available for Appium.\

\b Appium Server
\b0 \cb1 \uc0\u8232 \cb3 Appium is a server written in Node.js. It can be built and installed {\field{\*\fldinst{HYPERLINK "http://appium.io/slate/en/master/#appium-from-source.md"}}{\fldrslt \cf4 \strokec4 from source}} or installed directly from NPM: 
\f3\fs26 \cf5 \cb6 \strokec5 $ npm install -g appium $ appium
\f1\fs28 \cf2 \cb3 \strokec2 \

\b Appium Clients
\b0 \cb1 \uc0\u8232 \cb3 There are client libraries (in Java, Ruby, Python, PHP, JavaScript, and C#) which support Appium's extensions to the WebDriver protocol. When using Appium, you want to use these client libraries instead of your regular WebDriver client. You can view the full list of libraries {\field{\*\fldinst{HYPERLINK "http://appium.io/slate/en/master/#appium-clients.md"}}{\fldrslt \cf4 \strokec4 here}}.\
\pard\pardeftab720\sl400\sa200\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/appium/appium-dot-app"}}{\fldrslt 
\b \cf4 \strokec4 Appium.app}}
\b , {\field{\*\fldinst{HYPERLINK "https://github.com/appium/appium-dot-exe"}}{\fldrslt \cf4 \strokec4 Appium.exe}}
\b0 \cb1 \uc0\u8232 \cb3 There exist GUI wrappers around the Appium server that can be downloaded. These come bundled with everything required to run the Appium server, so you don't need to worry about Node. They also come with an Inspector, which enables you to check out the hierarchy of your app. This can come in handy when writing tests.\
\pard\pardeftab720\sl400\partightenfactor0

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
}