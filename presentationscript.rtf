{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Medium;
\f3\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red0\green0\blue233;}
\margl1440\margr1440\vieww19760\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs72 \cf0 Philosophy
\fs24 \

\b 1.No recompiling changing app (native)\

\b0 \
\pard\pardeftab720\sl400\sa200\partightenfactor0

\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
APPIUM hace uso de los frameworks de automatizaci\'f3n propios de cada "vendor". De esta forma no es necesario recompilar la app para integrar ning\'fan script de appium o de cualquier framework de prueba para probar la aplicaci\'f3n.\
Esto significa que se prueba la aplicaci\'f3n que esta corriendo en el simulador o en el dispositivo. No es necesario tener el c\'f3digo fuente de la aplicaci\'f3n \
los frameworks de automatizaci\'f3n que utiliza son:UIAUTOMATION para iOS y UIAutomator o Instrumentation para android\
(librerias de cada vendor para escribir tests sobre los elementos de la interfaz de usuario que expone cada applicacion)
\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\

\b 2. Test framework agnostic:\
\
Appium encapsula las librer\'edas de cada vendor en un API, la API web driver,\
 (api: application programming interface).Esta API especifica un protocolo cliente/servidor conocido como JSON Wire protocol
\i  (usa json sobre http)
\i0  Debido a esta arquitectura cliente servidor, un cliente en cualquier lenguaje puede ser utilizado para enviar http recuestes al server. Existen ya opciones de especificas de clientes para appiun escritas en varios lenguajes de programaci\'f3n. esto significa que tambi\'e9n se puede utilizar cualquier test framework las librer\'edas del cliente son simple http clientes en otras palabras appium y webdriver clients no son t\'e9cnicamente test frameworks sino que son librer\'edas de automatizaci\'f3n
\b0 \
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 \kerning1\expnd0\expndtw0 3. Not reinvent the wheel\
web driver es el standard the facto de automatizacion para web-browsers. y es un w3c working draft (
\i\b0\fs28 \cf2 \expnd0\expndtw0\kerning0
es un consorcio international para documentar y definer protocolos due aseguren el crecimiento de la red 
\i0 ).\
Porque hacer algo totalmente diferente para mobile? En lugar de eso las librer\'edas de appium han extendido el protocolo agregando m\'e9todos a la api para automatizaci\'f3n mobil
\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl400\partightenfactor0

\f1\fs28 \cf2 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\
\pard\pardeftab720\sl400\partightenfactor0
\cf0 \
\
\pard\pardeftab720\sl520\sa200\partightenfactor0

\f2\fs48 \cf2 \expnd0\expndtw0\kerning0
Appium Concepts\
\pard\pardeftab720\sl400\sa200\partightenfactor0

\f1\b\fs28 \cf2 Client/Server Architecture
\b0 \uc0\u8232 Appium es basicament un webserver que espone una rest api\
ES un web server que expone una rest api (
\f3\fs24 \cf0 Representational state transfer ({\field{\*\fldinst{HYPERLINK "http://searchsoa.techtarget.com/definition/REST"}}{\fldrslt \cf3 \ul \ulc3 REST}}), cuando un web service hace uso de la arquitectura rest se le llama restfull-api o rest api)
\f1\fs28 \cf2 )\
Recibe conexiones de un cliente, ejecuta esos comandos en un dispositivo mobil y responde con un http response que es la respuesta de la ejecuci\'f3n del comando.\
El hecho de ser una arquitectura cliente servidor abre las posibilidades a escribir las pruebas en cualquier lenguaje que tengo un cliente http. Podemos poner el server en una maquina distinta a donde est\'e1n las pruebas, podemos escribir el c\'f3digo y subirlo a un servicio en la nube como sauce labs\
 \

\b Session\
La automatizacion se ejecuta siempre  en el contexto de una sesion. Los clientes debe iniciar la session al server en una forma espec\'edfica en cada librer\'eda, pero siempre es un request de tipo "post session" con un objecto  json que se llama "desired capabilities".. EN see momento el server iniciar\'e1 la session y responderas con un session id due es usado en adelante para envier otros comandos
\b0 \uc0\u8232 \
\

\b Desired Capabilities\
Es un conjunto de keys y valores recibido for el server que especifica el tipo de session de automatizacion que estamos interesados en iniciar. Existen muchas capabilities que pueden modificar el comportamiento del server durante la automatizacion por ejemplo podemos setear platformName a IOS para decir a apium que quermos una sesison ios en lugar de android. O podemos especificar safariAllowpopups a true para asgurarnos que durante la sesion de safari estamos autorizando que js abra nuevas ventanas. 
\b0 \uc0\u8232 existe un documento capabilities doc que define todos los posibles valores de cada key disponible\
\

\b Appium Clients
\b0 \uc0\u8232 estas son extensionces del protocolo de appium webdriver cuando se usa appium se recomienda el uso de estas librerias en lugar de tu cliente webdriver regular. \
}